---
import { render } from 'astro:content';
import {
  CalendarRegular,
  ClockRegular,
  LiveRegular,
  LocationRegular
} from '$/components/Icons/fluentui';
import { MdxComponents } from '$/components/Mdx/index.astro';
import Avatar from '@/components/Profile/Avatar.astro';
import Layout from '@/layouts/Meeting.astro';
import Persona from '@/components/Profile/Persona';
import ProfileCard from '@/components/Profile/ProfileCard.astro';
import { PdfSvg, YouTubeSvg } from '$/components/Icons';
import { CountdownBadge } from '@/components/ReactMigration/Countdown';
import { TagGroup } from '@/components/ReactMigration/Tag';
import {
  calculateSemester,
  convertDate,
  getMeetings,
  getYouTubeEmbedUrl,
  weekNumber
} from '@/utils/meetings';
import consts from '@/consts';
import locations from '@/locations.json';
import { createICalendarLocation } from '@/utils/icalendar';
import { getProfilesFromNames } from '$/utils/profiles';
// import { Tooltip } from '@/components/Tooltip';

import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';
import duration from 'dayjs/plugin/duration';
import advanced from 'dayjs/plugin/advancedFormat';
dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.extend(duration);
dayjs.extend(advanced);


export async function getStaticPaths() {
  const meetings = await getMeetings();
  return meetings.map((meeting) => ({
    params: { slug: meeting.relativeSlug },
    props: { page: meeting },
  }));
}

const { page } = Astro.props;
const { Content } = await render(page);
const meeting = page.data;

const profiles = await getProfilesFromNames(meeting.credit);
const semester = calculateSemester(meeting.time_start);
const time_start = meeting.time_start ? dayjs(meeting.time_start).tz(meeting.timezone) : undefined;
const time_end = meeting.time_start && meeting.duration
  ? dayjs(meeting.time_start).tz(meeting.timezone).add(dayjs.duration(meeting.duration))
  : undefined;
const iCalendarLocation = createICalendarLocation(locations, meeting.location);
---
<Layout
  title={`${meeting.semester}${meeting.week_number != null ? ' Week ' + weekNumber(meeting.week_number) : ''}: ${meeting.title} — ${consts.title}`}
  description={`${meeting.semester}${meeting.week_number != null ? ' Week ' + weekNumber(meeting.week_number) : ''} • ${convertDate(meeting.time_start, "MMMM Do, YYYY", meeting.timezone)}${meeting.description ? ` • ${meeting.description}` : ''}`}
  image={meeting.card_image?.foreground?.src ?? meeting.card_image?.background?.src}
  video={meeting.recording ? getYouTubeEmbedUrl(meeting.recording) : undefined}
  type="article"
>
  <article class="panel w-full self-start" itemscope itemtype="http://schema.org/Article">
    <header>
      <div class="flex flex-col">
        <h1 class="mb-1" itemprop="headline">
          {meeting.title}
        </h1>
        {semester ? (
          <p class="font-mono m-0 order-first">
            {semester}{meeting.week_number != null ? ` Week ${weekNumber(meeting.week_number)}` : null}
          </p>
        ) : null}
        {meeting.tags && meeting.tags.length > 0 ? (
          <div class="flex flex-row mb-2">
            <TagGroup tags={meeting.tags.concat()} />
          </div>
        ) : null}
        {profiles.length > 0 ? (
          <div class="flex flex-col md:flex-row flex-shrink-0 flex-wrap gap-x-2 gap-y-1 md:items-center mb-2">
            {profiles.map((profile, idx) => (
              <Persona profile={profile} client:load>
                <span slot="avatar">
                  <Avatar profile={profile} />
                </span>
                <span slot="visibleInfo">
                  <span itemprop="author">
                    {profile.name}{idx === profiles.length - 1 ? null : (
                      <span class="hidden md:inline-block">,</span>
                    )}
                  </span>
                </span>
                <span slot="hiddenInfo">
                  <ProfileCard profile={profile} />
                </span>
              </Persona>
            ))}
          </div>
        ) : null}
        <div class="flex flex-col mb-2">
          {time_start ? (
            <div class="flex flex-row gap-2 items-center">
              <CalendarRegular className="flex-none text-primary" />
              <span class="inline align-middle">
                <time datetime={time_start.format("YYYY-MM-DDTHH:mmZ")}>
                  {time_start.format("dddd, MMMM Do, YYYY")}
                </time>
              </span>
            </div>
          ) : null}
          {time_start && time_end ? (
            <div class="flex flex-row gap-2 items-center">
              <ClockRegular className="flex-none text-primary" />
              <span class="inline align-middle">
                <time datetime={meeting.duration}>
                  {time_start.minute() == 0 ?
                    <>{time_start.format("h")}</> :
                    <>{time_start.format("h:mm")}</>
                  }
                  {time_start.format("A") !== time_end.format("A") ?
                    <>{time_start.format(" A")}</> :
                    null
                  }
                  &ndash;
                  {time_end.minute() == 0 ?
                    <>{time_end.format("h A (z)")}</> :
                    <>{time_end.format("h:mm A (z)")}</>
                  }
                </time>
              </span>
              <CountdownBadge time_start={time_start.toDate()} time_close={time_end.toDate()} />
            </div>
          ) : null}
          {meeting.location ? (
            <div class="flex flex-row gap-2 items-center">
              <LocationRegular className="flex-none text-primary" />
              {iCalendarLocation?.title ? (
                <a
                  class="inline align-middle !underline underline-offset-2"
                  href={`https://maps.google.com/?q=${iCalendarLocation.title}`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {meeting.location}
                </a>
              ) : (
                <span class="inline align-middle">
                  {meeting.location}
                </span>
              )}
            </div>
          ) : null}
        </div>
      </div>
    </header>
    {meeting.live_video_url || meeting.recording || meeting.slides ? (
      <div class="grid sm:flex sm:flex-row gap-2 mb-4">
        {meeting.recording ? (
          <a
            href={meeting.recording}
            class="btn-primary"
            target="_blank" rel="noopener noreferrer"
          >
            <YouTubeSvg />
            <p class="inline align-middle m-0 ml-2">
              Watch video
            </p>
          </a>
        ) : (meeting.live_video_url ? (
          <a
            href={meeting.live_video_url}
            class="btn-primary flex flex-row items-center"
            target="_blank" rel="noopener noreferrer"
          >
            <LiveRegular className="flex-none" />
            <span class="m-0 ml-2">
              Join live video
            </span>
          </a>
        ) : null)}
        {meeting.slides ? (
          <a
            href={meeting.slides}
            class="btn-primary"
            target="_blank" rel="noopener noreferrer"
          >
            <PdfSvg />
            <p class="inline align-middle m-0 ml-2">
              Download slides
            </p>
          </a>
        ) : null}
      </div>
    ) : null}
    {meeting.recording ? (
      (() => {
        const url = getYouTubeEmbedUrl(meeting.recording);
        return url ? (
          <iframe
            title={meeting.title + " video"}
            class="bg-surface-000 w-full max-w-prose aspect-video mx-auto mb-4"
            allow="encrypted-media; fullscreen; picture-in-picture"
            allowfullscreen={true}
            src={url}
            itemprop="video"
          />
        ) : null;
      })()
    ) : meeting.slides ? (
      <iframe
        src={meeting.slides}
        class="skeleton-shimmer w-full max-w-prose aspect-video mx-auto mb-4"
      />
    ) : null}
    <section class="md-root w-full max-w-prose mx-auto" itemprop="articleBody">
      <Content components={MdxComponents} />
    </section>
    <span class="z-50 hidden md:block">
      {/* <Tooltip.Profile offset={3} place="bottom-start" client:load /> */}
    </span>
  </article>
</Layout>
