---
import Layout, {
  type SemesterLinkProps,
  type MeetingIndexPageProps,
} from '@/layouts/MeetingIndex.astro';
import MeetingRow from '@/components/Meeting/Row.astro';
import MeetingTime from '@/components/Meeting/Time.astro';
import MeetingTypeBadge from '@/components/Meeting/TypeBadge';
import CalendarSubscribe from '@/components/CalendarSubscribe';
import { InfoRegular } from '$/components/Icons/fluentui';
import {
  getSemesterToMeetingsMap,
  formatSemester,
} from '@/utils/meetings';
import {
  meetingMetadata,
  meetingMetatypes,
} from '$/utils/meetingMetadata';
import semestersMetadata from '@/semesters.json';

import dayjs from 'dayjs';
import duration from 'dayjs/plugin/duration';
import utc from 'dayjs/plugin/utc';

dayjs.extend(duration);
dayjs.extend(utc);

export async function getStaticPaths() {
  const semesterToMeetingsMap = await getSemesterToMeetingsMap();
  const semesters = Array.from(semesterToMeetingsMap.keys());
  const allIndexLink = {
    name: 'All Meetings',
    url: '/meetings/all/',
    semester: 'all',
  } as SemesterLinkProps;
  const allSemesterLinks = [allIndexLink];
  semesters.forEach((semester) => {
    allSemesterLinks.push({
      name: formatSemester(semester),
      url: `/meetings/${semester.toLowerCase()}/`,
      semester,
    });
  });
  // Add an index page for each semester index link
  return allSemesterLinks.map((semesterLink, idx) => {
    if (semesterLink.semester === 'all') {
      return {
        params: {
          indexSlug: 'all',
        },
        props: {
          meetings: semesterToMeetingsMap,
          allLinks: allSemesterLinks,
          currLink: allIndexLink,
        } as MeetingIndexPageProps,
      };
    } else {
      const meetings = new Map([[semesterLink.semester, semesterToMeetingsMap.get(semesterLink.semester)]]);
      // Skip the first link since it's the all meetings link
      const newerLink = idx !== 1 ? (allSemesterLinks[idx - 1] || undefined) : undefined;
      const olderLink = allSemesterLinks[idx + 1] || undefined;
      return {
        params: {
          indexSlug: semesterLink.semester.toLowerCase(),
        },
        props: {
          meetings,
          allLinks: allSemesterLinks,
          currLink: semesterLink,
          newerLink,
          olderLink,
        } as MeetingIndexPageProps,
      };
    }
  });
}

const props = Astro.props as MeetingIndexPageProps;
let semesterMetadata = semestersMetadata.find(entry => entry.semester === props.currLink.semester);
const isAllIndex = props.currLink.semester === 'all';
---
<script>
  function initMeetingsIndex() {
    updateUpcomingMeetings();
  }

  function updateUpcomingMeetings() {
    const meetingsIndex = document.getElementById('meetings-index');
    if (!meetingsIndex) {
      return;
    }
    const upcomingMeetingsSection = document.getElementById('upcoming-meetings-section');
    const upcomingMeetingsList = document.getElementById('upcoming-meetings-list');
    const maybeUpcomingMeetings = meetingsIndex.querySelectorAll('.maybe-upcoming');
    for (let i = maybeUpcomingMeetings.length - 1; i >= 0; i--) {
      const maybeUpcomingMeeting = maybeUpcomingMeetings[i];
      const timeCloseStr = maybeUpcomingMeeting.getAttribute('data-time-close');
      if (!timeCloseStr) {
        continue;
      }
      const timeClose = parseInt(timeCloseStr);
      const now = Date.now();
      if (now < timeClose) {
        maybeUpcomingMeeting.setAttribute('data-is-upcoming', 'true');
        if (upcomingMeetingsList) {
          upcomingMeetingsList.appendChild(maybeUpcomingMeeting);
        }
        if (upcomingMeetingsSection) {
          upcomingMeetingsSection.classList.remove('hidden');
        }
      }
    }
  };
  document.addEventListener('DOMContentLoaded', initMeetingsIndex);
  document.addEventListener('astro:after-swap', initMeetingsIndex);
</script>

<style>

</style>

<Layout
  {...props}
>
  {semesterMetadata?.activeMeetings ? (
    <section id="schedule" class="flex flex-col gap-2 mb-4">
      {/* <div class="flex flex-row gap-2 items-center rounded-lg text-sm bg-blue-950 w-fit px-2 py-1">
        <InfoRegular />
        <span>
          Specific meeting times and locations may vary. Make sure to check individual meeting details.
        </span>
      </div> */}
      <div class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-2 md:gap-4">
        {semesterMetadata.activeMeetings.map((activeMeeting) => (
          <div class="flex flex-col gap-2 border-2 border-surface-200 rounded-xl px-3 py-2">
            <MeetingTypeBadge type={activeMeeting.meetingType} fullName={true} />
            {meetingMetadata[activeMeeting.meetingType]?.description ? (
              <p class="text-sm">
                {meetingMetadata[activeMeeting.meetingType].description}
              </p>
            ) : null}
            {activeMeeting.schedule?.map((info) => (
              <div class="flex flex-col">
                  <span class="font-bold">{info.time}</span>
                  <span class="text-sm">{info.location}</span>
              </div>
            ))}
          </div>
        ))}
      </div>
      <CalendarSubscribe
        selected={Array.from(semesterMetadata.activeMeetings).map((activeMeeting) => activeMeeting.meetingType)}
        client:load
      />
    </section>
  ) : (
    <span class="mb-4">
      <CalendarSubscribe selected={meetingMetatypes} client:load />
    </span>
  )}
  {!isAllIndex ? (
    <section
      id="upcoming-meetings-section"
      class="panel mb-4 hidden"
    >
      <p class="font-bold text-2xl m-0">
        Upcoming
      </p>
      <hr class="border-surface-200" />
      <ul
        id="upcoming-meetings-list"
        class="flex flex-col pb-2"
      ></ul>
    </section>
  ) : null}
  <section id="meetings-index" class="panel">
    {Array.from(props.meetings.entries()).map(([semester, meetings]) => (
      <div id={semester}>
        <p class="font-bold text-2xl m-0">
          {formatSemester(semester)}
        </p>
        <hr class="border-surface-200" />
        <ul class="flex flex-col pb-2">
          {meetings.map((meeting) => (
            <MeetingRow
              input={meeting}
              dateFormat={isAllIndex ? "YYYY-MM-DD" : undefined}
            />
          ))}
        </ul>
      </div>
    ))}
  </section>
</Layout>