---
import Layout, {
  type SemesterLinkProps,
  type MeetingIndexPageProps,
} from '@/layouts/MeetingIndex.astro';
import MeetingRow from '@/components/Meeting/Row.astro';
import MeetingTypeBadge from '@/components/Meeting/TypeBadge';
import {
  getSemesterToMeetingsMap,
  formatSemester,
} from '@/utils/meetings';
import { meetingMetadata } from '$/utils/meetingMetadata';
import semestersMetadata from '@/semesters.json';

import dayjs from 'dayjs';
import duration from 'dayjs/plugin/duration';
import utc from 'dayjs/plugin/utc';

dayjs.extend(duration);
dayjs.extend(utc);

export async function getStaticPaths() {
  const semesterToMeetingsMap = await getSemesterToMeetingsMap();
  const semesters = Array.from(semesterToMeetingsMap.keys());
  const allIndexLink = {
    name: 'All Meetings',
    url: '/meetings/all/',
    semester: 'all',
  } as SemesterLinkProps;
  const allSemesterLinks = [allIndexLink];
  semesters.forEach((semester) => {
    allSemesterLinks.push({
      name: formatSemester(semester),
      url: `/meetings/${semester.toLowerCase()}/`,
      semester,
    });
  });
  // Add an index page for each semester index link
  return allSemesterLinks.map((semesterLink, idx) => {
    if (semesterLink.semester === 'all') {
      return {
        params: {
          indexSlug: 'all',
        },
        props: {
          meetings: semesterToMeetingsMap,
          allLinks: allSemesterLinks,
          currLink: allIndexLink,
        } as MeetingIndexPageProps,
      };
    } else {
      const meetings = new Map([[semesterLink.semester, semesterToMeetingsMap.get(semesterLink.semester)]]);
      // Skip the first link since it's the all meetings link
      const newerLink = idx !== 1 ? (allSemesterLinks[idx - 1] || undefined) : undefined;
      const olderLink = allSemesterLinks[idx + 1] || undefined;
      const semesterMetadata = semestersMetadata.find(entry => entry.semester === semesterLink.semester);
      return {
        params: {
          indexSlug: semesterLink.semester.toLowerCase(),
        },
        props: {
          meetings,
          allLinks: allSemesterLinks,
          currLink: semesterLink,
          newerLink,
          olderLink,
          semesterMetadata,
        } as MeetingIndexPageProps,
      };
    }
  });
}

const props = Astro.props as MeetingIndexPageProps;
const isAllIndex = props.currLink.semester === 'all';
---
<script>
  function initMeetingsIndex() {
    updateUpcomingMeetings();
  }

  function updateUpcomingMeetings() {
    const meetingsIndex = document.getElementById('meetings-index');
    if (!meetingsIndex) {
      return;
    }
    const activeMeetingsSection = document.getElementById('active-meetings-section');
    const liveMeetingsList = document.getElementById('live-meetings-list');
    const upcomingMeetingsList = document.getElementById('upcoming-meetings-list');
    const allMaybeActive = meetingsIndex.querySelectorAll('[data-maybe-active="true"]');
    var countLive = 0;
    var countUpcoming = 0;
    var prevLiveNode = null;
    var prevUpcomingNode = null;
    for (let i = allMaybeActive.length - 1; i >= 0; i--) {
      const maybeActive = allMaybeActive[i];
      const timeStartStr = maybeActive.getAttribute('data-time-start');
      const timeCloseStr = maybeActive.getAttribute('data-time-close');
      if (!timeStartStr || !timeCloseStr) {
        continue;
      }
      const timeStart = parseInt(timeStartStr);
      const timeClose = parseInt(timeCloseStr);
      const now = Date.now();
      if (now >= timeClose) {
        continue;
      }
      maybeActive.setAttribute('data-is-active', 'true');
      if (now >= timeStart && liveMeetingsList) {
        countLive++;
        liveMeetingsList.insertBefore(maybeActive, prevLiveNode);
        prevLiveNode = maybeActive;
      } else if (upcomingMeetingsList) {
        countUpcoming++;
        upcomingMeetingsList.insertBefore(maybeActive, prevUpcomingNode);
        prevUpcomingNode = maybeActive;
      }
    }
    if (activeMeetingsSection && (countLive || countUpcoming)) {
      const activeMeetingsTitle = document.getElementById('active-meetings-title');
      if (activeMeetingsTitle) {
        activeMeetingsTitle.textContent = countLive && countUpcoming
        ? 'Live & Upcoming'
        : countLive
        ? 'Live'
        : 'Upcoming';
      }
      if (countUpcoming > 3) {
        const label = document.getElementById('upcoming-visibility-toggle-label');
        const input = document.getElementById('upcoming-visibility-toggle-input');
        if (label && input) {
          label.style.display = 'block';
          input.style.display = 'block';
        }
      }
      activeMeetingsSection.classList.remove('hidden');
    }
  };
  document.addEventListener('astro:after-swap', initMeetingsIndex);
  document.addEventListener('astro:page-load', initMeetingsIndex);
</script>

<style is:global>
  #upcoming-meetings-list li {
    display: none;
  }
  #upcoming-meetings-list li:nth-child(-n+3) {
    display: list-item;
  }
  #upcoming-visibility-toggle-input:checked ~ #upcoming-meetings-list li {
    display: list-item;
  }
  #upcoming-visibility-toggle-label:after {
    content: 'Show more';
  }
  #upcoming-visibility-toggle-input:checked ~ #upcoming-visibility-toggle-label:after {
    content: 'Show less';
  }
</style>

<Layout
  {...props}
>
  {props.semesterMetadata?.activeMeetings ? (
    <section id="schedule" class="flex flex-col gap-2 mb-4">
      <div class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-2 md:gap-4">
        {props.semesterMetadata.activeMeetings.map((activeMeeting) => (
          <div class="flex flex-col justify-between h-full gap-2 border-2 border-surface-200 rounded-2xl overflow-hidden">
            <div class="flex flex-col gap-2 p-3">
              <MeetingTypeBadge type={activeMeeting.meetingType} fullName={true} />
              {meetingMetadata[activeMeeting.meetingType]?.description ? (
                <p class="text-sm">
                  {meetingMetadata[activeMeeting.meetingType].description}
                </p>
              ) : null}
              {activeMeeting.schedule?.map((info) => (
                <div class="flex flex-col">
                    <span class="font-bold">{info.time}</span>
                    <span class="text-sm">{info.location}</span>
                </div>
              ))}
            </div>
            {/* <MeetingUpcomingCard /> */}
          </div>
        ))}
      </div>
    </section>
  ) : null}
  {!isAllIndex ? (
    <section
      id="active-meetings-section"
      class="panel mb-4 hidden"
    >
      <p
        id="active-meetings-title"
        class="font-bold text-2xl m-0"
      >
        Live & Upcoming
      </p>
      <hr class="border-surface-200" />
      <input
        type="checkbox"
        id="upcoming-visibility-toggle-input"
        class="peer sr-only"
        checked={true}
        style={{display: 'none'}}
      />
      <ul
        id="live-meetings-list"
        class="flex flex-col"
      ></ul>
      <ul
        id="upcoming-meetings-list"
        class="flex flex-col pb-2"
      ></ul>
      <label
        id="upcoming-visibility-toggle-label"
        for="upcoming-visibility-toggle-input"
        class="peer-focus-visible:ring-2 ring-white ring-offset-2 rounded-md text-primary hover:text-secondary cursor-pointer"
        style={{display: 'none'}}
      />
    </section>
  ) : null}
  <section id="meetings-index" class="panel">
    {Array.from(props.meetings.entries()).map(([semester, meetings]) => (
      <div id={semester}>
        <p class="font-bold text-2xl m-0">
          {formatSemester(semester)}
        </p>
        <hr class="border-surface-200" />
        <ul class="flex flex-col pb-2">
          {(isAllIndex ? meetings : [...meetings].reverse()).map((meeting) => (
            <MeetingRow
              input={meeting}
              dateFormat={isAllIndex ? "YYYY-MM-DD" : undefined}
            />
          ))}
        </ul>
      </div>
    ))}
  </section>
</Layout>
