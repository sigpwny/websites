---
import Layout from '@/layouts/MeetingIndex.astro';
import Link from '$/components/Link.astro';
import MeetingRow from '@/components/Meeting/Row.astro';
import MeetingTime from '@/components/Meeting/Time.astro';
import MeetingControls from '@/components/Meeting/Controls';
import DropdownSelect from '@/components/DropdownSelect';
import Menu from '@/components/Menu';
import {
  ChevronLeftFilled,
  ChevronRightFilled,
  InfoRegular,
} from '$/components/Icons/fluentui';
import {
  getMeetings,
  getSemesterToMeetingsMap,
  formatSemester,
} from '@/utils/meetings';
import semestersMetadata from '@/semesters.json';

import dayjs from 'dayjs';
import duration from 'dayjs/plugin/duration';
import utc from 'dayjs/plugin/utc';

dayjs.extend(duration);
dayjs.extend(utc);

export async function getStaticPaths() {
  const semesterToMeetingsMap = await getSemesterToMeetingsMap();
  const semesters = Array.from(semesterToMeetingsMap.keys());
  return semesters.map((semester, idx) => {
    const meetings = semesterToMeetingsMap.get(semester);
    if (!meetings) {
      return null;
    }
    const newerSemester = semesters[idx - 1] || null;
    const olderSemester = semesters[idx + 1] || null;
    return {
      params: {
        semester: semester.toLowerCase(),
      },
      props: {
        semester,
        meetings,
        newerSemester,
        olderSemester,
        allSemesters: semesters,
      },
    };
  });
}

const { semester, meetings, newerSemester, olderSemester, allSemesters } = Astro.props;
let semesterMetadata = semestersMetadata.find(entry => entry.semester === semester);

const newerLink = `/meetings/${newerSemester?.toLowerCase()}/` || null;
const newerButtonClass = ["button flex flex-row gap-2 items-center bg-surface-100 hover:bg-surface-150 text-white", { 'opacity-0 pointer-events-none': !newerSemester }];
const olderLink = `/meetings/${olderSemester?.toLowerCase()}/` || null;
const olderButtonClass = ["button flex flex-row gap-2 items-center bg-surface-100 hover:bg-surface-150 text-white", { 'opacity-0 pointer-events-none': !olderSemester }];

const rawMeetings = (await getMeetings()).sort(
  (a, b) => b.data.time_start.valueOf() - a.data.time_start.valueOf()
);

// The server build time will always be in the past, so we can filter out meetings before then.
const potentiallyUpcomingMeetings = rawMeetings.filter((meeting) => {
  const now = new Date();
  const time_close = dayjs(meeting.data.time_start).add(dayjs.duration(meeting.data.duration)).toDate();
  return time_close > now && meeting.data.semester === semester;
}).reverse();
---
<Layout>
  {semesterMetadata?.schedule ? (
    <section id="schedule" class="flex flex-col gap-2 my-4">
      <div class="flex flex-row gap-2 items-center rounded-lg text-sm bg-blue-950 w-fit px-2 py-1">
        <InfoRegular />
        <span>
          Specific meeting times and locations may vary. Make sure to check individual meeting details.
          {/* All meeting times are listed in U.S. Central Time unless otherwise specified. */}
        </span>
      </div>
      <div class="flex flex-col md:flex-row md:gap-4">
        {semesterMetadata.schedule.map((entry) => (
          <div class="flex flex-col gap-2 border-2 border-surface-200 rounded-xl px-3 py-2">
            <span>{entry.meetingType}</span>
            <div class="flex flex-row">
              {entry.meetingInfo.map((info) => (
                <MeetingTime
                  time={info.time}
                  location={info.location}
                />
              ))}
            </div>
          </div>
        ))}
      </div>
    </section>
  ) : null}
  <MeetingControls client:load />
  {potentiallyUpcomingMeetings.length > 0 ? (
    <div class="panel mb-4">
      <p class="font-bold text-2xl m-0">
        Upcoming
      </p>
      <hr class="border-surface-200" />
      <ul class="flex flex-col pb-2">
        {potentiallyUpcomingMeetings.map((meeting) => (
          <MeetingRow input={meeting} hideUpcoming={true} />
        ))}
      </ul>
    </div>
  ) : null}
  <div class="panel">
    <div id={semester}>
      <p class="font-bold text-2xl m-0">
        {formatSemester(semester)}
      </p>
      <hr class="border-surface-200" />
      <ul class="flex flex-col pb-2">
        {meetings.map((meeting) => (
          <MeetingRow input={meeting} />
        ))}
      </ul>
    </div>
  </div>
  <div class="flex flex-col gap-2 mt-8 items-center">
    <div class="flex flex-row gap-2 justify-center w-full">
      {newerLink ? (
        <Link href={newerLink} class:list={newerButtonClass}>
          <ChevronLeftFilled />
          <span>Newer</span>
        </Link>
      ) : (
        <span class:list={newerButtonClass}>
          <ChevronLeftFilled />
          <span>Newer</span>
        </span>
      )}
      <!-- <span class="button flex flex-row gap-2 items-center justify-between bg-surface-100 hover:bg-surface-150 text-white w-full max-w-40 border border-surface-200 pr-1">
        <span class="truncate">{formatSemester(semester)}</span>
        <ChevronUpDownFilled />
      </span> -->
      <span class="w-full max-w-40">
        <DropdownSelect
          contentRootClassName="w-full max-w-40"
          options={[]}
          selectedId={formatSemester(semester)}
          displayText={formatSemester(semester)}
          onSelect={() => {}}
          client:load
        >
          <Menu className="custom-scrollbar">
            <ul class="!gap-0">
              <li>
                <Link href="/meetings/all/" class="!px-2 !py-1">
                  All Meetings
                </Link>
              </li>
              {allSemesters.map((entry) => (
                <li>
                  <Link
                    href={`/meetings/${entry.toLowerCase()}/`}
                    class="!px-2 !py-1"
                  >
                    {formatSemester(entry)}
                  </Link>
                </li>
              ))}
            </ul>
          </Menu>
        </DropdownSelect>
      </span>
      {olderLink ? (
        <Link href={olderLink} class:list={olderButtonClass}>
          <span>Older</span>
          <ChevronRightFilled />
        </Link>
      ) : (
        <span class:list={olderButtonClass}>
          <span>Older</span>
          <ChevronRightFilled />
        </span>
      )}
    </div>
    <Link href="/meetings/all/" class="text-primary !underline">
      Load all meetings
    </Link>
  </div>
</Layout>