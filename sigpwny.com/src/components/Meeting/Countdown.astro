---
export interface CountdownBadgeProps {
  time_start: Date;
  time_close: Date;
}

const props = Astro.props as CountdownBadgeProps;
---
<script>
  class CountdownManager {
    private timers: Map<Element, number>;

    constructor() {
      this.timers = new Map();
      this.initialize();
    }

    initialize() {
      const countdowns = document.querySelectorAll('.astro-countdown-badge') as NodeListOf<HTMLDivElement>;
      countdowns.forEach(element => {
        const timeStartStr = element.getAttribute('data-time-start');
        const timeCloseStr = element.getAttribute('data-time-close');
        if (!timeStartStr || !timeCloseStr) {
          return;
        }
        const timeStart = parseInt(timeStartStr);
        const timeClose = parseInt(timeCloseStr);
        this.setupTimer(element, timeStart, timeClose);
      });
    }

    setupTimer(element: HTMLDivElement, timeStart: number, timeClose: number) {
      const updateDisplay = () => {
        const now = Date.now();

        let baseClasses = 'astro-countdown-badge max-w-fit px-2 font-mono select-none whitespace-nowrap rounded-md ';

        // Handle closed state
        if (now >= timeClose) {
          element.className = baseClasses;
          element.style.display = 'none';
          this.clearTimer(element);
          return null;
        }

        element.style.display = 'inline-flex';

        // Handle live state
        if (now >= timeStart) {
          baseClasses += 'bg-red-600';
          element.className = baseClasses;
          element.textContent = 'LIVE';
          return 60000; // Update every minute
        }

        const diff = timeStart - now;
        const weeks = Math.floor(diff / (1000 * 60 * 60 * 24 * 7));
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);

        // Handle countdown state
        baseClasses += 'bg-gradient-to-r from-purple-500 to-blue-500';
        element.className = baseClasses;
        // Determine display format and next update interval
        if (weeks > 0) {
          element.textContent = `in ${weeks} wk${weeks > 1 ? 's' : ''}`;
          return 86400000; // Update every day
        } else if (days > 0) {
          element.textContent = `in ${days} day${days > 1 ? 's' : ''}`;
          return 3600000; // Update every hour
        } else if (hours > 0) {
          element.textContent = `in ${hours} hr${hours > 1 ? 's' : ''}`;
          return 60000; // Update every minute
        } else {
          element.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
          return 1000; // Update every second
        }
      };

      const scheduleNextUpdate = () => {
        const interval = updateDisplay();
        if (interval === null) return;
        const timerId = window.setTimeout(() => {
          scheduleNextUpdate();
        }, interval);
        this.timers.set(element, timerId);
      };

      scheduleNextUpdate();
    }

    clearTimer(element: HTMLDivElement) {
      const timerId = this.timers.get(element);
      if (timerId) {
        clearTimeout(timerId);
        this.timers.delete(element);
      }
    }
  }

  document.addEventListener('astro:page-load', () => {
    new CountdownManager();
  });
</script>

<div
  class="astro-countdown-badge"
  style={{display: 'none'}}
  data-time-start={props.time_start.getTime()}
  data-time-close={props.time_close.getTime()}
/>